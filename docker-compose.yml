version: "2.4"

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Build backend image once and reference it in both prisma and backend services
  backend_image:
    build:
      context: ./backend
      dockerfile: Dockerfile
    # This service is only used to produce an image; it won't be started by itself.
    # Give it no ports and don't run it as a runtime service.
    labels:
      - "purpose=backend-image"

  prisma:
    image: ${COMPOSE_PROJECT_NAME:-project}_backend_image
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    env_file:
      - ./backend/.env
    # wait for DB and then run prisma generate & migrate (dev). No external script file.
    command: >
      sh -c "
        echo 'Waiting for Postgres...';
        until pg_isready -h db -p 5432 -U postgres >/dev/null 2>&1; do
          sleep 1;
        done;
        echo 'Postgres ready â€” running prisma migrate dev';
        npx prisma migrate dev;
        echo 'Running prisma generate';
        npx prisma generate;
        echo 'Prisma tasks finished.';
      "

  backend:
    image: ${COMPOSE_PROJECT_NAME:-project}_backend_image
    env_file:
      - ./backend/.env
    depends_on:
      prisma:
        condition: service_completed_successfully
    ports:
      - "3000:3000"
    # Mount source for live dev, but protect node_modules (so image-installed modules remain)
    volumes:
      - ./backend:/app:delegated
      - /app/node_modules
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3000 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["npm", "run", "dev"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app:delegated
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

volumes:
  db_data:
